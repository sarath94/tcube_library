Chapter 3: Introduction to SQL




      Database System Concepts, 6th Ed.
          ©Silberschatz, Korth and Sudarshan
     See www.db-book.com for conditions on re-use
                           Chapter 3: Introduction to SQL

             Overview of the SQL Query Language
             Data Definition
             Basic Query Structure
             Additional Basic Operations
             Set Operations
             Null Values
             Aggregate Functions
             Nested Subqueries
             Modification of the Database




Database System Concepts - 6th Edition       3.2    ©Silberschatz, Korth and Sudarshan
                                             History
             IBM Sequel language developed as part of System R project at
                  the IBM San Jose Research Laboratory
             Renamed Structured Query Language (SQL)
             ANSI and ISO standard SQL:
                       SQL-86, SQL-89, SQL-92
                       SQL:1999, SQL:2003, SQL:2008, …
             Commercial systems offer most, if not all, SQL-92 features,
                  plus varying feature sets from later standards and special
                  proprietary features.
                       Not all examples here may work on your particular system.




Database System Concepts - 6th Edition           3.3                 ©Silberschatz, Korth and Sudarshan
                                    Data Definition Language
           The SQL data-definition language (DDL) allows the
           specification of information about relations, including:
               The schema for each relation.
               The domain of values associated with each attribute.
               Integrity constraints
               And as we will see later, also other information such as
                         The set of indices to be maintained for each relations.
                         Security and authorization information for each relation.
                         The physical storage structure of each relation on disk.




Database System Concepts - 6th Edition              3.4                 ©Silberschatz, Korth and Sudarshan
                                         Domain Types in SQL
         char(n). Fixed length character string, with user-specified length n.
         varchar(n). Variable length character strings, with user-specified
             maximum length n.
            int. Integer (a finite subset of the integers that is machine-
             dependent).
            smallint. Small integer (a machine-dependent subset of the integer
             domain type).
            numeric(p,d). Fixed point number, with user-specified precision of
             p digits, with n digits to the right of decimal point.
            real, double precision, float(n)
            More are covered in Chapter 4.




Database System Concepts - 6th Edition           3.5            ©Silberschatz, Korth and Sudarshan
                                         Create Table Construct

        An SQL relation is defined using the create table command:
                               Example:
                                create table instructor (
                                       ID           char(5),
                                       name         varchar(20),
                                       dept_name varchar(20),
                                       salary        numeric(8,2))
        insert into instructor values („10211‟, ‟Smith‟, ‟Biology‟, 66000);
        insert into instructor values („10211‟, null, ‟Biology‟, 66000);




Database System Concepts - 6th Edition                3.6            ©Silberschatz, Korth and Sudarshan
                  Integrity Constraints in Create Table

              not null
              primary key (A1, ..., An )
              foreign key (Am, ..., An ) references r

            Example: Declare branch_name as the primary key for branch
            .
                                   create table instructor (
                                       ID           char(5),
                                       name         varchar(20) not null,
                                       dept_name varchar(20),
                                       salary        numeric(8,2),
                                         primary key (ID),
                                         foreign key (dept_name) references department)

          primary key declaration on an attribute automatically ensures
             not null


Database System Concepts - 6th Edition                   3.7                ©Silberschatz, Korth and Sudarshan
                   And a Few More Relation Definitions
          create table student (
                       ID            varchar(5) primary key,
                       name          varchar(20) not null,
                       dept_name     varchar(20),
                       tot_cred      numeric(3,0),
                       foreign key (dept_name) references department) );


          create table takes (
                       ID            varchar(5),
                       course_id     varchar(8),
                       sec_id        varchar(8),
                       semester      varchar(6),
                       year          numeric(4,0),
                       grade         varchar(2),
                       primary key (ID, course_id, semester, year),
                       foreign key (ID) references student,
                       foreign key (course_id, sec_id, semester, year) references section );



Database System Concepts - 6th Edition              3.8                    ©Silberschatz, Korth and Sudarshan
                                         And more still
             create table course (
                           course_id     varchar(8) primary key,
                           title         varchar(50),
                           dept_name     varchar(20),
                           credits       numeric(2,0),
                           foreign key (dept_name) references department) );

        Quiz Q1: True or false:
            The primary key constraint ensures that primary key values:
                       (A) are repeated across tuples
                       (B) are not null
             (1) True, True (2) True, False (3) False, True (4) false, false

        Quiz Q2: the foreign key constraint on course ensures:
            (1) all departments have associated courses
            (2) dept_name is not null, i.e. all courses have departments
            (3) dept_name occurs in the department relation

Database System Concepts - 6th Edition            3.9                ©Silberschatz, Korth and Sudarshan
                         Drop and Alter Table Constructs
            drop table student
                Deletes the table and its contents
                   
            delete from student
               Deletes all contents of table, but retains table

            alter table
                      alter table r add A D
                             where A is the name of the attribute to be added to
                             relation r and D is the domain of A.
                          All  tuples in the relation are assigned default or null as
                             the value for the new attribute.
                      alter table r drop A
                          where         A is the name of an attribute of relation r
                          Dropping  of attributes not supported by many
                             databases
Database System Concepts - 6th Edition                     3.10                 ©Silberschatz, Korth and Sudarshan
                                         Basic Query Structure

            A typical SQL query has the form:

                                          select A1, A2, ..., An
                                          from r1, r2, ..., rm
                                          where P

                    Ai represents an attribute
                    Ri represents a relation
                    P is a predicate.
            The result of an SQL query is a relation.




Database System Concepts - 6th Edition                    3.11     ©Silberschatz, Korth and Sudarshan
                                         The select Clause
            The select clause list the attributes desired in the result of a query
                      corresponds to the projection operation of the relational algebra
            Example: find the names of all instructors:
                                           select name
                                           from instructor
            NOTE: SQL names are case insensitive (i.e., you may use upper- or
                 lower-case letters.)
                      E.g. Name ≡ NAME ≡ name
                      Some people use upper case wherever we use bold font.




Database System Concepts - 6th Edition               3.12                   ©Silberschatz, Korth and Sudarshan
                                    The select Clause (Cont.)

            SQL allows duplicates in relations as well as in query results.
            To force the elimination of duplicates, insert the keyword distinct
                 after select.
            Find the names of all departments with instructor, and remove
                 duplicates
                                         select distinct dept_name
                                         from instructor
            The keyword all specifies that duplicates not be removed.


                                         select all dept_name
                                         from instructor




Database System Concepts - 6th Edition                 3.13          ©Silberschatz, Korth and Sudarshan
                                    The select Clause (Cont.)

            An asterisk in the select clause denotes “all attributes”
                                              select *
                                              from instructor
            The select clause can contain arithmetic expressions involving
                 the operation, +, –, , and /, and operating on constants or
                 attributes of tuples.
            The query:
                                     select ID, name, salary/12
                                     from instructor
                 would return a relation that is the same as the instructor relation,
                 except that the value of the attribute salary is divided by 12.

           Quiz Q3: Which of these clauses is optional in an SQL query:
           (1) select (2) from (3) where (4) none of these


Database System Concepts - 6th Edition                 3.14           ©Silberschatz, Korth and Sudarshan
                                         The where Clause

            The where clause specifies conditions that the result must
                 satisfy
                      Corresponds to the selection predicate of the relational
                       algebra.
            To find all instructors in Comp. Sci. dept with salary > 80000
                                select name
                                from instructor
                                where dept_name = ‘Comp. Sci.' and salary > 80000
            Comparison results can be combined using the logical
                 connectives and, or, and not.
            Comparisons can be applied to results of arithmetic expressions.




Database System Concepts - 6th Edition             3.15                ©Silberschatz, Korth and Sudarshan
                                         The from Clause

          The from clause lists the relations involved in the query
                    Corresponds to the Cartesian product operation of the
                     relational algebra.
          Find the Cartesian product instructor X teaches
                                         select 
                                         from instructor, teaches
                    generates every possible instructor – teaches pair, with all
                     attributes from both relations
          Cartesian product not very useful directly, but useful combined
               with where-clause condition (selection operation in relational
               algebra)




Database System Concepts - 6th Edition                3.16            ©Silberschatz, Korth and Sudarshan
              Cartesian Product: instructor X teaches
                                instructor          teaches




Database System Concepts - 6th Edition       3.17     ©Silberschatz, Korth and Sudarshan
                                               Joins
             For all instructors who have taught some course, find their names
                  and the course ID of the courses they taught.
                            select name, course_id
                            from instructor, teaches
                            where instructor.ID = teaches.ID
             Find the course ID, semester, year and title of each course offered
                  by the Comp. Sci. department
                           select section.course_id, semester, year, title
                            from section, course
                            where section.course_id = course.course_id and
                                     dept_name = „Comp. Sci.'




Database System Concepts - 6th Edition            3.18             ©Silberschatz, Korth and Sudarshan
               Let’s Try Writing Some Queries in SQL
            Some queries to be written…..
             Find the salary of the instructor with ID 10101
             Find titles of all courses in the Comp. Sci. department
             Find course ID, year and semester of all courses taken by any
                  student named “Shankar”
             As above, but additionally show the title of the course also




Database System Concepts - 6th Edition       3.19                ©Silberschatz, Korth and Sudarshan
                                               Quiz

                   Quiz Q4: The query select name, course_id
                                         from instructor, teaches
                   (1) returns all matching instructor/teaches pairs
                   (2) is a syntax error
                   (3) returns all pairs of instructor, teaches tuples
                   (4) none of the above




Database System Concepts - 6th Edition            3.20                   ©Silberschatz, Korth and Sudarshan
                                         Natural Join
             Natural join matches tuples with the same values for all
                  common attributes, and retains only one copy of each common
                  column
             select *
                  from instructor natural join teaches;




Database System Concepts - 6th Edition         3.21             ©Silberschatz, Korth and Sudarshan
                                         Natural Join Example
           List the names of instructors along with the course ID of the courses that
               they taught.


                    select name, course_id
                     from instructor, teaches
                     where instructor.ID = teaches.ID;


                    select name, course_id
                     from instructor natural join teaches;




Database System Concepts - 6th Edition             3.22               ©Silberschatz, Korth and Sudarshan
                                         Natural Join (Cont.)
      Danger in natural join: beware of unrelated attributes with same name
           which get equated incorrectly
      List the names of instructors along with the the titles of courses that
           they teach
      Incorrect version (makes course.dept_name = instructor.dept_name)
                select name, title
                 from instructor natural join teaches natural join course;
      Correct version
                select name, title
                 from instructor natural join teaches, course
                 where teaches.course_id= course.course_id;
      Another correct version
                select name, title
                 from (instructor natural join teaches)
                                             join course using(course_id);
Database System Concepts - 6th Edition           3.23              ©Silberschatz, Korth and Sudarshan
                                         The Rename Operation

       The SQL allows renaming relations and attributes using the as clause:
                                         old-name as new-name
       E.g.
                 select ID, name, salary/12 as monthly_salary
                  from instructor

       Find the names of all instructors who have a higher salary than
                  some instructor in „Comp. Sci‟.
                 select distinct T. name
                  from instructor as T, instructor as S
                  where T.salary > S.salary and S.dept_name = ‘Comp. Sci.’
       Keyword as is optional and may be omitted
                           instructor as T ≡ instructor T
                 Keyword as must be omitted in Oracle

Database System Concepts - 6th Edition                  3.24     ©Silberschatz, Korth and Sudarshan
                                          String Operations
        SQL includes a string-matching operator for comparisons on
             character strings. The operator “like” uses patterns that are
             described using two special characters:
                  percent (%). The % character matches any substring.
                  underscore (_). The _ character matches any character.
        Find the names of all instructors whose name includes the substring
             “dar”.
                                     select name
                                     from instructor
                                     where name like '%dar%'
        Match the string “100 %”
                                         like ‘100 \%' escape '\'
        SQL supports a variety of string operations such as
                  concatenation (using “||”)
                   converting from UPPER to lower case (and vice versa)
                   finding string length, extracting substrings, etc.
Database System Concepts - 6th Edition                  3.25             ©Silberschatz, Korth and Sudarshan
                            Ordering the Display of Tuples
             List in alphabetic order the names of all instructors
                            select distinct name
                           from instructor
                           order by name
             We may specify desc for descending order or asc for
                  ascending order, for each attribute; ascending order is the
                  default.
                       Example: order by name desc
             Can sort on multiple attributes
                       Example: order by dept_name, name

                                         Quiz Q5: If you omit the order by clause
                                         (1) there is no default ordering
                                         (2) the results may turn out to be ordered
                                         (3) both the above are true
                                         (4) neither 1 nor 2 is true.
Database System Concepts - 6th Edition                     3.26                 ©Silberschatz, Korth and Sudarshan
                                              Duplicates
             Multiset: set with duplicates
             In relations with duplicates, SQL can define how many copies of
                 tuples appear in the result.
             Multiset versions of some of the relational algebra operators

                      r1                r2   B(r1)      C>2(r2)       B(r1) x r2
                   A        B            C     B                          B         C
                                                            C
                   1        a            2     a                          a         2
                                                            3
                   2        a            3                                a         2
                                               a            3
                                                                          a         3
                                         3
                                                                          a         3
                                                                          a         3
                                                                          a         3




Database System Concepts - 6th Edition             3.27              ©Silberschatz, Korth and Sudarshan
             Multisets in Relational Algebra and SQL

             Multiset version of relational operations
                    1.    (r1): If there are c1 copies of tuple t1 in r1, and t1 satisfies
                         selections ,, then there are c1 copies of t1 in  (r1).
                    2.   A (r ): For each copy of tuple t1 in r1,
                                  there is a copy of tuple A (t1) in A (r1)
                                   where A (t1) denotes the projection of the single tuple t1.
                    3.    r1 x r2 : If there are c1 copies of tuple t1 in r1 and c2 copies of
                         tuple t2 in r2, there are c1 x c2 copies of the tuple t1. t2 in r1 x r2
             SQL duplicate semantics:
                                   select A1,, A2, ..., An
                                   from r1, r2, ..., rm
                                   where P
                  is equivalent to the multiset version of the expression:

                                          A1,A2 ,,An ( P (r1  r2    rm ))

Database System Concepts - 6th Edition                        3.28                  ©Silberschatz, Korth and Sudarshan
                                         Set Operations

             Find courses that ran in Fall 2009 or in Spring 2010

                  (select course_id from section where sem = „Fall‟ and year = 2009)                  A
                   union
                  (select course_id from section where sem = „Spring‟ and year = 2010)               B

            Find courses that ran in Fall 2009 and in Spring 2010

                   A
                   intersect
                   B

            Find courses that ran in Fall 2009 but not in Spring 2010

                    A
                    except
                    B




Database System Concepts - 6th Edition             3.29                  ©Silberschatz, Korth and Sudarshan
                                         Set Operations
             Set operations union, intersect, and except
                       Each of the above operations automatically eliminates
                        duplicates
             To retain all duplicates use the corresponding multiset versions
                  union all, intersect all and except all.

                  Suppose a tuple occurs m times in r and n times in s, then, it
                  occurs:
                       m + n times in r union all s
                       min(m,n) times in r intersect all s
                       max(0, m – n) times in r except all s




Database System Concepts - 6th Edition             3.30              ©Silberschatz, Korth and Sudarshan
                                             Null Values
            It is possible for tuples to have a null value, denoted by null, for
                 some of their attributes
            null signifies an unknown value or that a value does not exist.
            The result of any arithmetic expression involving null is null
                      Example: 5 + null returns null
            The predicate is null can be used to check for null values.
                      Example: Find all instructors whose salary is null.
                          select name
                          from instructor
                          where salary is null
            Any comparison with null returns unknown
                      Returning false could cause problems:
                           Consider     r.A < 10 vs. not (r.A >= 10)


Database System Concepts - 6th Edition               3.31               ©Silberschatz, Korth and Sudarshan
                       Null Values and Three Valued Logic

            Any comparison with null returns unknown
                      Example: 5 < null or null <> null   or   null = null
            Three-valued logic using the truth value unknown:
                      OR: (unknown or true) = true,
                           (unknown or false) = unknown
                           (unknown or unknown) = unknown
                      AND: (true and unknown) = unknown,
                           (false and unknown) = false,
                           (unknown and unknown) = unknown
                      NOT: (not unknown) = unknown
                      “P is unknown” evaluates to true if predicate P evaluates
                       to unknown
            Result of where clause predicate is treated as false if it
                 evaluates to unknown

Database System Concepts - 6th Edition           3.32                 ©Silberschatz, Korth and Sudarshan
                                               Quiz


                Quiz Q6: Consider the where clause predicates
                    where r.A <> 5     and     where not (r.A = 5)
                (1) the two are equivalent
                (2) the two are equivalent only if r.a is declared as not null
                (3) the two are equivalent only if r.a is null
                (4) the two are never equivalent




Database System Concepts - 6th Edition           3.33                 ©Silberschatz, Korth and Sudarshan
                                         Aggregate Functions
             These functions operate on the multiset of values of a
                  column of a relation, and return a value
                                          avg: average value
                                          min: minimum value
                                          max: maximum value
                                          sum: sum of values
                                          count: number of values




Database System Concepts - 6th Edition               3.34           ©Silberschatz, Korth and Sudarshan
                               Aggregate Functions (Cont.)
             Find the average salary of instructors in the Computer Science
                  department
                       select avg (salary)
                        from instructor
                        where dept_name= ‟Comp. Sci.‟;
             Find the total number of instructors who teach a course in the
                  Spring 2010 semester
                       select count (distinct ID)
                        from teaches
                        where semester = ‟Spring‟ and year = 2010
             Find the number of tuples in the course relation
                       select count (*)
                        from course;



Database System Concepts - 6th Edition          3.35                ©Silberschatz, Korth and Sudarshan
                        Aggregate Functions – Group By
             Find the average salary of instructors in each department
                      select dept_name, avg (salary)
                       from instructor
                       group by dept_name;
                      Note: departments with no instructor will not appear in result




Database System Concepts - 6th Edition               3.36                   ©Silberschatz, Korth and Sudarshan
                                         Aggregation (Cont.)
             Attributes in select clause outside of aggregate functions must
                  appear in group by list
                       /* erroneous query */
                        select dept_name, ID, avg (salary)
                        from instructor
                        group by dept_name;




Database System Concepts - 6th Edition           3.37           ©Silberschatz, Korth and Sudarshan
                   Aggregate Functions – Having Clause

             Find the names and average salaries of all departments whose
                  average salary is greater than 42000

                          select dept_name, avg (salary)
                          from instructor
                          group by dept_name
                          having avg (salary) > 42000;

                  Note: predicates in the having clause are applied after the
                        formation of groups whereas predicates in the where
                        clause are applied before forming groups




Database System Concepts - 6th Edition              3.38           ©Silberschatz, Korth and Sudarshan
                                Null Values and Aggregates
            Total all salaries
                                         select sum (salary )
                                         from instructor
                      Above statement ignores null amounts
                      Result is null if there is no non-null amount
            All aggregate operations except count(*) ignore tuples with null
                 values on the aggregated attributes
            What if collection has only null values?
                      count returns 0
                      all other aggregates return null

                Quiz Q7: given a multiset of values {1, 1, 3, 3, null}
                 the average is
                  (1) 1     (2) 2      (3) 8/5      (4) null

Database System Concepts - 6th Edition                   3.39            ©Silberschatz, Korth and Sudarshan
               Let’s Try Writing Some Queries in SQL
            Some queries to be written…..
             Find the total number of courses taken by Shankar
             Find first year in which CS 801 ran.
             Find IDs and number of courses taken by all students who
                  have taken more than 20 courses




Database System Concepts - 6th Edition       3.40             ©Silberschatz, Korth and Sudarshan
                                         Nested Subqueries
            SQL provides a mechanism for the nesting of subqueries.
            A subquery is a select-from-where expression that is nested
                 within another query.
            A common use of subqueries is to perform tests for set
                 membership, set comparisons, and set cardinality.




Database System Concepts - 6th Edition          3.41                 ©Silberschatz, Korth and Sudarshan
                                          Example Query

             Find courses offered in Fall 2009 and in Spring 2010

                             select distinct course_id
                             from section
                             where semester = ‟Fall‟ and year= 2009 and
                                    course_id in (select course_id
                                                  from section
                                                  where semester = ‟Spring‟ and year= 2010);

             Find courses offered in Fall 2009 but not in Spring 2010

                              select distinct course_id
                              from section
                              where semester = ‟Fall‟ and year= 2009 and
                                     course_id not in (select course_id
                                                   from section
                                                   where semester = ‟Spring‟ and year= 2010);



Database System Concepts - 6th Edition                3.42                  ©Silberschatz, Korth and Sudarshan
                                         Example Query
            Find the total number of (distinct) students who have taken
                 course sections taught by the instructor with ID 10101

                           select count (distinct ID)
                           from takes
                           where (course_id, sec_id, semester, year) in
                                               (select course_id, sec_id, semester, year
                                                from teaches
                                                where teaches.ID= 10101);


            Note: Above query can be written in a much simpler manner. The
                            formulation above is simply to illustrate SQL features.



           Quiz Q8: The above query can be rewritten using
           (1) natural join (2) join using (3) group by (4) order by

Database System Concepts - 6th Edition               3.43                   ©Silberschatz, Korth and Sudarshan
                                         Set Comparison

            Find names of instructors with salary greater than that of some
                 (at least one) instructor in the Biology department.

                               select distinct T.name
                               from instructor as T, instructor as S
                               where T.salary > S.salary and S.dept name = ‟Biology‟;



            Same query using > some clause

                             select name
                             from instructor
                             where salary > some (select salary
                                                  from instructor
                                                  where dept name = ‟Biology‟);

           Quiz Q9: Are the above equivalent taking into account multiset semantics?
            1. Yes   2. No    3. Depends on null values


Database System Concepts - 6th Edition                 3.44                  ©Silberschatz, Korth and Sudarshan
                                          Example Query
             Find the names of all instructors whose salary is greater than
                  the salary of all instructors in the Biology department.

                             select name
                             from instructor
                             where salary > all (select salary
                                                 from instructor
                                                 where dept name = ‟Biology‟);

                   Can we write this using aggregates?




Database System Concepts - 6th Edition                3.45                  ©Silberschatz, Korth and Sudarshan
                                           Example Query
             Find the names of all instructors whose salary is greater than
                  the salary of all instructors in the Biology department.

                             select name
                             from instructor
                             where salary > all (select salary
                                                 from instructor
                                                 where dept name = ‟Biology‟);

                   Can we write this using aggregates? Yes:
                                select name
                                from instructor
                                where salary > (select max(salary)
                                                from instructor
                                                where dept name = ‟Biology‟);




Database System Concepts - 6th Edition                 3.46                 ©Silberschatz, Korth and Sudarshan
                                     Test for Empty Relations
            The exists construct returns the value true if the argument
                 subquery is nonempty.
            exists r  r  Ø
            not exists r  r = Ø




Database System Concepts - 6th Edition         3.47            ©Silberschatz, Korth and Sudarshan
                                         Correlation Variables
             Yet another way of specifying the query “Find all courses
                  taught in both the Fall 2009 semester and in the Spring 2010
                  semester”
                     select course_id
                     from section as S
                     where semester = ‟Fall‟ and year= 2009 and
                            exists (select *
                                    from section as T
                                    where semester = ‟Spring‟ and year= 2010
                                            and S.course_id= T.course_id);
             Correlated subquery
             Correlation name or correlation variable




Database System Concepts - 6th Edition            3.48             ©Silberschatz, Korth and Sudarshan
                                         Not Exists
            Find all students who have taken all courses offered in the
                 Biology department.

                select distinct S.ID, S.name
                from student as S
                where not exists ( (select course_id
                                     from course                                SQA
                                     where dept_name = ‟Biology‟)
                                    except
                                     (select T.course_id
                                       from takes as T                           SQB
                                       where S.ID = T.ID));

                Note that X – Y = Ø  X Y
                     Think of above query as
                          select distinct S.ID, S.name
                          from student as S
                          where SQB contains SQA
                Note: Cannot write this query using = all and its variants
Database System Concepts - 6th Edition          3.49                ©Silberschatz, Korth and Sudarshan
                                 Subqueries in From Clause
       SQL allows a subquery expression to be used in the from clause
       Find the average instructors‟ salaries of those departments where the
           average salary is greater than $42,000.
                  select dept_name, avg_salary
                  from (select dept_name, avg (salary) as avg_salary
                         from instructor
                         group by dept_name)
                  where avg_salary > 42000;
       Note that we do not need to use the having clause
       Another way to write above query
                  select dept_name, avg_salary
                  from (select dept_name, avg (salary)
                         from instructor
                         group by dept_name)
                         as dept_avg (dept_name, avg_salary)
                  where avg_salary > 42000;
Database System Concepts - 6th Edition        3.50               ©Silberschatz, Korth and Sudarshan
                                    Derived Relations (Cont.)
             And yet another way to write it: lateral clause
                        select name, salary, avg_salary
                        from instructor I1,
                                  lateral (select avg(salary) as avg_salary
                                           from instructor I2
                                           where I2.dept_name= I1.dept_name);
             Note: lateral is part of the SQL standard, but is not supported on
                  some database systems; some databases such as SQL Server
                  offer alternative syntax




Database System Concepts - 6th Edition          3.51               ©Silberschatz, Korth and Sudarshan
                                         With Clause
            The with clause provides a way of defining a temporary view
                 whose definition is available only to the query in which the with
                 clause occurs.
            Find all departments with the maximum budeget

                      with max_budget (value) as
                         (select max(budget)
                          from department)
                      select budget
                      from department, max_budget
                      where department.budget = max_budget.value;




Database System Concepts - 6th Edition          3.52                 ©Silberschatz, Korth and Sudarshan
                   Complex Queries using With Clause

             With clause is very useful for writing complex queries,
                  supported by most database systems
             Find all departments where the total salary is greater than the
                  average of the total salary at all departments


              with dept _total (dept_name, value) as
                   (select dept_name, sum(salary)
                    from instructor
                    group by dept_name),
              dept_total_avg(value) as
                  (select avg(value)
                  from dept_total)
              select dept_name
              from dept_total, dept_total_avg
              where dept_total.value >= dept_total_avg.value;

Database System Concepts - 6th Edition          3.53               ©Silberschatz, Korth and Sudarshan
                                         Scalar Subquery
             Scalar subquery is one which is used where a single value is
                  expected
                  select dept_name,
                          (select count(*)
                            from instructor
                            where department.dept_name = instructor.dept_name)
                          as num_instructors
                  from department;


             Runtime error if subquery returns more than one result tuple




Database System Concepts - 6th Edition         3.54             ©Silberschatz, Korth and Sudarshan
                 Modification of the Database – Deletion

            Delete all instructors
                                         delete from instructor


            Delete all instructors from the Finance department
                                          delete from instructor
                                          where dept_name= ‟Finance‟;
            Delete all tuples in the instructor relation for those instructors
                 associated with a department located in the Watson building.
                                         delete from instructor
                                          where dept_name in (select dept_name
                                                                from department
                                                                where building = ‟Watson‟);




Database System Concepts - 6th Edition                     3.55                ©Silberschatz, Korth and Sudarshan
                                         Example Query
          Delete all instructors whose salary is less than the average
              salary of instructors


              delete from instructor
              where salary< (select avg (salary) from instructor);



           Problem: as we delete tuples from deposit, the average salary
            changes
           Solution used in SQL:
               1. First, compute avg salary and find all tuples to delete
               2. Next, delete all tuples found above (without recomputing avg or
                  retesting the tuples)



Database System Concepts - 6th Edition         3.56                  ©Silberschatz, Korth and Sudarshan
                 Modification of the Database – Insertion

            Add a new tuple to course
                       insert into course
                           values (‟CS-437‟, ‟Database Systems‟, ‟Comp. Sci.‟, 4);


            or equivalently
                       insert into course (course_id, title, dept_name, credits)
                           values (‟CS-437‟, ‟Database Systems‟, ‟Comp. Sci.‟, 4);


            Add a new tuple to student with tot_creds set to null
                       insert into student
                           values (‟3003‟, ‟Green‟, ‟Finance‟, null);




Database System Concepts - 6th Edition            3.57                  ©Silberschatz, Korth and Sudarshan
               Modification of the Database – Insertion

            Add all instructors to the student relation with tot_creds set to 0
                       insert into student
                         select ID, name, dept_name, 0
                          from instructor
            The select from where statement is evaluated fully before any of
                 its results are inserted into the relation (otherwise queries like
                       insert into table1 select * from table1
                 would cause problems, if table1 did not have any primary key
                 defined.
                       Question: What would the problem be?




Database System Concepts - 6th Edition           3.58                  ©Silberschatz, Korth and Sudarshan
                Modification of the Database – Updates

            Increase salaries of instructors whose salary is over $100,000 by
                 3%, and all others receive a 5% raise

                           update instructor
                           set salary = case
                                          when salary <= 100000 then salary * 1.05
                                          else salary * 1.03
                                        end




Database System Concepts - 6th Edition            3.59               ©Silberschatz, Korth and Sudarshan
                         Updates with Scalar Subqueries
             Recompute and update tot_creds value for all students
                    update student S
                     set tot_cred = ( select sum(credits)
                                     from takes natural join course
                                     where S.ID= takes.ID and
                                            takes.grade <> ‟F‟ and
                                            takes.grade is not null);
             Sets tot_creds to null for students who have not taken any
                  course
             Instead of sum(credits), use:
                                case
                                  when sum(credits) is not null then sum(credits)
                                  else 0
                                end
                 Or          coalesce(sum(credits), 0)

Database System Concepts - 6th Edition              3.60               ©Silberschatz, Korth and Sudarshan
  End of Chapter 3




Database System Concepts, 6th Ed.
     ©Silberschatz, Korth and Sudarshan
See www.db-book.com for conditions on re-use
                                    Where Clause Predicates
             SQL includes a between comparison operator
             Example: Find the names of all instructors with salary between
                  $90,000 and $100,000 (that is, $90,000 and $100,000)
                       select name
                         from instructor
                         where salary between 90000 and 100000
             Tuple comparison
                       select name, course_id
                        from instructor, teaches
                        where (instructor.ID, dept_name) = (teaches.ID, ‟Biology‟);
                       Not all databases support this syntax…




Database System Concepts - 6th Edition               3.62                   ©Silberschatz, Korth and Sudarshan
                                             Division Operator

            Given relations r(R) and s(S), such that S  R, r  s is the largest
                relation t(R-S) such that
                            txsr
            E.g. let r(ID, course_id) = ID, course_id (takes ) and
                         s(course_id) = course_id (dept_name=“Biology”(course )
                then r  s gives us students who have taken all courses in the Biology
                department
            Can write r  s as

                                         temp1  R-S (r )
                                         temp2  R-S ((temp1 x s ) – R-S,S (r ))
                                         result = temp1 – temp2
                    The result to the right of the  is assigned to the relation variable on
                     the left of the .
                    May use variable in subsequent expressions.

Database System Concepts - 6th Edition                       3.63                    ©Silberschatz, Korth and Sudarshan
